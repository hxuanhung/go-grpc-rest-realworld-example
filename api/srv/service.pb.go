// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/srv/service.proto

package srv

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	pb "github.com/hxuanhung/go-grpc-rest-realworld-example/api/pb"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("api/srv/service.proto", fileDescriptor_36554cfc910dccce) }

var fileDescriptor_36554cfc910dccce = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x4f, 0x6e, 0xd4, 0x30,
	0x14, 0xc6, 0xc5, 0x30, 0x1a, 0x34, 0x61, 0x01, 0x8a, 0x66, 0x16, 0x44, 0x2c, 0xcc, 0xc0, 0x0a,
	0xe1, 0x58, 0xc0, 0x8e, 0x5d, 0xc4, 0x82, 0x59, 0xb0, 0x02, 0x81, 0x90, 0x10, 0x42, 0x8e, 0xf3,
	0xb0, 0x0d, 0x89, 0x9f, 0xf1, 0xb3, 0x33, 0xb3, 0xee, 0x11, 0xa6, 0xf7, 0xe8, 0x65, 0x7a, 0x85,
	0x1e, 0xa4, 0x4a, 0x26, 0xad, 0xaa, 0xb6, 0x2b, 0xeb, 0xfb, 0xa3, 0x9f, 0xed, 0x2f, 0x5b, 0x4b,
	0x6f, 0x05, 0x85, 0x5e, 0x10, 0x84, 0xde, 0x2a, 0x28, 0x7d, 0xc0, 0x88, 0xf9, 0x43, 0x0a, 0x7d,
	0xb1, 0xd5, 0x36, 0x9a, 0x54, 0x97, 0x0a, 0x3b, 0x61, 0xf6, 0x49, 0x3a, 0x93, 0x9c, 0x16, 0x1a,
	0xb9, 0x0e, 0x5e, 0xf1, 0x00, 0x14, 0x79, 0x00, 0xd9, 0xee, 0x30, 0xb4, 0x0d, 0x87, 0xbd, 0xec,
	0x7c, 0x0b, 0x62, 0xe0, 0xf9, 0x5a, 0x74, 0x40, 0x24, 0xf5, 0x84, 0x2b, 0x9e, 0x6b, 0x44, 0x3d,
	0x85, 0xd2, 0x39, 0x8c, 0x32, 0x5a, 0x74, 0x34, 0xa5, 0x6f, 0xc6, 0x43, 0x71, 0x0d, 0x8e, 0xd3,
	0x4e, 0x6a, 0x0d, 0x41, 0xa0, 0x1f, 0x1b, 0x77, 0xdb, 0xef, 0xce, 0x66, 0xd9, 0xbc, 0x52, 0x01,
	0xf2, 0xbf, 0xd9, 0xe3, 0x2d, 0xc8, 0x36, 0x9a, 0x8f, 0x06, 0xd4, 0xbf, 0xfc, 0x59, 0xe9, 0xeb,
	0xf2, 0x13, 0xc4, 0x1b, 0xde, 0x17, 0xf8, 0x9f, 0x80, 0x62, 0x51, 0xdc, 0x17, 0x91, 0x47, 0x47,
	0xb0, 0x79, 0x75, 0xa8, 0x96, 0xd9, 0xa3, 0xaf, 0xc7, 0xdf, 0x9f, 0x9c, 0x5f, 0x9c, 0xce, 0xf2,
	0xfc, 0xa9, 0xe8, 0xdf, 0x0a, 0x33, 0x96, 0x7f, 0xab, 0x11, 0xfe, 0x2b, 0x5b, 0x7e, 0x23, 0x08,
	0x9f, 0x51, 0x5b, 0x97, 0xaf, 0x06, 0xdc, 0xb5, 0xbc, 0xba, 0x64, 0x7d, 0xcb, 0x9d, 0xf8, 0x2f,
	0x0f, 0xd5, 0x22, 0x9b, 0x0f, 0xfe, 0x08, 0x5f, 0x6d, 0x9e, 0x0c, 0xf0, 0x44, 0x10, 0x48, 0xb4,
	0x43, 0xf3, 0xc3, 0x83, 0xd7, 0xc5, 0xcf, 0x43, 0xf5, 0x23, 0xff, 0x3e, 0x3d, 0x82, 0x35, 0x40,
	0x2a, 0xd8, 0x71, 0x00, 0xc6, 0x39, 0xdb, 0x19, 0xab, 0x0c, 0x23, 0x83, 0xa9, 0x6d, 0x98, 0xc3,
	0xc8, 0x6a, 0x60, 0x89, 0xa0, 0x61, 0xd6, 0x31, 0xdf, 0x4a, 0x05, 0x0c, 0xff, 0xb0, 0x68, 0x80,
	0x35, 0xa8, 0x52, 0x07, 0xee, 0x38, 0x17, 0x53, 0xd8, 0x0d, 0xe2, 0x45, 0xbd, 0x18, 0x77, 0x7b,
	0x7f, 0x19, 0x00, 0x00, 0xff, 0xff, 0x03, 0xb2, 0xb0, 0x37, 0xeb, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AcreClient is the client API for Acre service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AcreClient interface {
	// Check the health of the acre processor. This is used by load balancers to check end-to-end service health. Not yet implemented.
	HealthCheck(ctx context.Context, in *pb.GetHealthCheckRequest, opts ...grpc.CallOption) (*pb.GetHealthCheckResponse, error)
	UserLogin(ctx context.Context, in *pb.UserLoginRequest, opts ...grpc.CallOption) (*pb.UserLoginResponse, error)
}

type acreClient struct {
	cc *grpc.ClientConn
}

func NewAcreClient(cc *grpc.ClientConn) AcreClient {
	return &acreClient{cc}
}

func (c *acreClient) HealthCheck(ctx context.Context, in *pb.GetHealthCheckRequest, opts ...grpc.CallOption) (*pb.GetHealthCheckResponse, error) {
	out := new(pb.GetHealthCheckResponse)
	err := c.cc.Invoke(ctx, "/srv.Acre/HealthCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *acreClient) UserLogin(ctx context.Context, in *pb.UserLoginRequest, opts ...grpc.CallOption) (*pb.UserLoginResponse, error) {
	out := new(pb.UserLoginResponse)
	err := c.cc.Invoke(ctx, "/srv.Acre/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AcreServer is the server API for Acre service.
type AcreServer interface {
	// Check the health of the acre processor. This is used by load balancers to check end-to-end service health. Not yet implemented.
	HealthCheck(context.Context, *pb.GetHealthCheckRequest) (*pb.GetHealthCheckResponse, error)
	UserLogin(context.Context, *pb.UserLoginRequest) (*pb.UserLoginResponse, error)
}

// UnimplementedAcreServer can be embedded to have forward compatible implementations.
type UnimplementedAcreServer struct {
}

func (*UnimplementedAcreServer) HealthCheck(ctx context.Context, req *pb.GetHealthCheckRequest) (*pb.GetHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (*UnimplementedAcreServer) UserLogin(ctx context.Context, req *pb.UserLoginRequest) (*pb.UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}

func RegisterAcreServer(s *grpc.Server, srv AcreServer) {
	s.RegisterService(&_Acre_serviceDesc, srv)
}

func _Acre_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.GetHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcreServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv.Acre/HealthCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcreServer).HealthCheck(ctx, req.(*pb.GetHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Acre_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.UserLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AcreServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/srv.Acre/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AcreServer).UserLogin(ctx, req.(*pb.UserLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Acre_serviceDesc = grpc.ServiceDesc{
	ServiceName: "srv.Acre",
	HandlerType: (*AcreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _Acre_HealthCheck_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _Acre_UserLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/srv/service.proto",
}
